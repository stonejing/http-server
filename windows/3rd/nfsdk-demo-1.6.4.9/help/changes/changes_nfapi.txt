NFSDK 1.6.4.9
build 1.5.2.1
- Fixed a bug in nf_completeTCPConnectRequest.

NFSDK 1.6.3.8
build 1.5.2.0
- Removed the memory pools code.

NFSDK 1.6.3.1
build 1.5.1.9
- Fixed a memory leak with some linking flags.

NFSDK 1.6.0.9
build 1.5.1.7
- nfapi completes pended TCP connect requests automatically after exceeding 20 seconds timeout.

NFSDK 1.6.0.1
build 1.5.1.5
- The correct local IP address is assigned for UDP sockets, available in udpSend/udpReceive via nf_getUDPConnInfo.

NFSDK 1.5.9.8
build 1.5.1.3
- Fixed issues when API functions are called during nf_init and for TCP connections in connecting state.

NFSDK 1.5.8.9
build 1.5.1.1
- Large buffers support is enabled for TDI driver.
- Added the missing preprocessing of processName field in nf_setRulesEx.
- Removed /MP switch from make/msvc.mak to avoid errors.

NFSDK 1.5.8.6
build 1.5.0.9
- The filtering performance is increased for high speed TCP connections.
- Removed disabling TCP/UDP offloading option.

NFSDK 1.5.8.4
build 1.5.0.8
- Added necessary fixes to compile the project with Unicode support option.

NFSDK 1.5.8.0
build 1.5.0.7
- Added make file make\msvc.mak for building the component using nmake.exe. 
- Disabled the default 2 hours timeout for TCP connections.

NFSDK 1.5.7.8
build 1.5.0.5
- WFP driver service parameters in system registry are modified when Avast is installed for correct loading order.
- Removed closing of TCP connections in connect request state by timeout.

NFSDK 1.5.7.5
build 1.5.0.4
- nf_setOptions  supports the new flags NFF_DISABLE_AUTO_REGISTER and NFF_DISABLE_AUTO_START,  
disabling registering and starting the driver respectively during nf_init.
- The new function nf_registerDriverEx allows to specify the path to driver folder.
- It is possible to analyze the extended error code using GetLastError() when nf_registerDriver/nf_registerDriverEx return NF_STATUS_FAIL.

NFSDK 1.5.7.3
build 1.5.0.2
- Optimized the filtering on TCP send path to avoid client timeouts.
- The CPU usage reducing algorithm is modified for better filtering performance.

NFSDK 1.5.7.1
build 1.5.0.0
- CPU usage and speed enhancement for TCP receives with WFP driver.
- Added support for bind redirection: NF_BINDING_RULE, nf_addBindingRule, nf_deleteBindingRules.
- Added NF_RULE_EX support with process name masks: NF_RULE_EX, nf_addRuleEx, nf_setRulesEx.
- Added the function nf_getDriverType.

NFSDK 1.5.6.2
build 1.4.9.5
- Changed the driver loading order for compatibility with Symantec and 360 Total Security.
- Minor performance enhancement for synchronization objects.

NFSDK 1.5.5.8
build 1.4.9.3
- The loading order is changed for TDI driver on Windows Vista/2008.
- Added functions nf_getTCPStat and nf_getUDPStat allowing to get the socket statistics in tcpClosed/udpClosed events.

NFSDK 1.5.5.5
build 1.4.9.1
- Fixed a race condition for closed TCP contexts, occured on receiving events after NF_TCP_CLOSE.

NFSDK 1.5.5.1
build 1.4.9.0
- The loading order is changed for TDI driver on Windows 7 and lower to avoid conflicts with antiviruses.
- _SECURE_SCL flag is commented out in stdafx.h
- Added a workaround for an issue with CreateServiceA on Windows 10 RS3.
- Added support for nf_setRules function.
- The bufferred on user mode UDP packets were indicated after calling nf_udpDisableFiltering.

NFSDK 1.5.4.1
build 1.4.8.7
- Increased the buffer limits for better performance.
- nf_tcpClose aborts TCP connections faster using additional call to WFP driver.
- Added flow control contexts support routines for limiting and counting traffic.

NFSDK 1.5.2.8
build 1.4.8.6
- Modified the required access rights for service handles.

NFSDK 1.5.2.5
build 1.4.8.5
- Fixed a leak of TCP contexts of incorrectly redirected connections.

NFSDK 1.5.1.9
build 1.4.8.4
- Added a registry value for preference loopback IPv4 instead of IPv6.

NFSDK 1.5.1.7
build 1.4.8.3
- Added functions for filtering IP traffic.
- Performance optimization.

NFSDK 1.5.1.3
build 1.4.8.2
- Added a fix for proper handling of remote TCP disconnect when FIN packet contains data.

NFSDK 1.5.1.2
build 1.4.8.1
- Minor performance optimization.

NFSDK 1.5.0.9
build 1.4.8.0
- The limits for internal queues are increased for better performance.

NFSDK 1.5.0.6
build 1.4.7.9
- Minor optimization for TCP receive path.

NFSDK 1.4.9.6
build 1.4.7.4
- Fixed an issue occured when nf_unRegisterDriver is called several times without reboot.

NFSDK 1.4.9.4
build 1.4.7.3
- Fixed an issue with hanging TCP connections waiting for remote disconnect.

NFSDK 1.4.9.3 
build 1.4.7.2
- Fixed an issue occured during filtering fast connections.

build 1.4.7.0
- Fixed filtering loops during handling incoming packets.

build 1.4.6.9
- Added a fix for correct work of TCP reinject requests from TDI driver.

build 1.4.6.8
- Added a separate thread for handling outgoing packets, for better performance and compatibility of WFP driver with other WFP filters.

build 1.4.6.7
- Fixed a possible race condition in tcpConnectRequest and udpConnectRequest events.

build 1.4.6.6
- nf_tcpClose didn't close connections from tcpConnected.

build 1.4.6.5
- Added function nf_getProcessNameFromKernel - analogue of nf_getProcessNameW, which doesn't require administrative privileges.

build 1.4.6.4
- nf_tcpDisableFiltering disables only indicating packets via events.
- nf_disableFiltering is removed.

build 1.4.6.3
- Fixed an issue with pending data packets.

build 1.4.5.3
- Fixed an issue in thread pool code.

build 1.4.5.2
- Fixed an issue with corrupted packets when WFP driver and other WFP filters are installed.

build 1.4.5.0
- Fixed a hang of TCP connection occured in some cases when the filtering is disabled.

build 1.4.4.9

- Added a flag NF_PEND_CONNECT_REQUEST allowing to defer the processing of tcpConnectRequest/udpConnectRequest events.
The deferred requests must be resumed later using the functions nf_completeTCPConnectRequest/nf_completeUDPConnectRequest.

- Added new functions:

/**
* Set the number of worker threads and initialization flags.
* The function should be called before nf_init. 
* By default nThreads = 1 and flags = 0
* @param nThreads Number of worker threads for NF_EventHandler events 
* @param flags A combination of flags from <tt>NF_FLAGS</tt>
**/
NFAPI_API void NFAPI_CC 
nf_setOptions(DWORD nThreads, DWORD flags);

/**
* Complete TCP connect request pended using flag NF_PEND_CONNECT_REQUEST.
**/
NFAPI_API NF_STATUS NFAPI_CC 
nf_completeTCPConnectRequest(ENDPOINT_ID id, PNF_TCP_CONN_INFO pConnInfo);

/**
* Complete UDP connect request pended using flag NF_PEND_CONNECT_REQUEST.
**/
NFAPI_API NF_STATUS NFAPI_CC 
nf_completeUDPConnectRequest(ENDPOINT_ID id, PNF_UDP_CONN_REQUEST pConnInfo);

/**
* Returns in pConnInfo the properties of TCP connection with specified id.
**/
NFAPI_API NF_STATUS NFAPI_CC 
nf_getTCPConnInfo(ENDPOINT_ID id, PNF_TCP_CONN_INFO pConnInfo);

/**
* Returns in pConnInfo the properties of UDP socket with specified id.
**/
NFAPI_API NF_STATUS NFAPI_CC 
nf_getUDPConnInfo(ENDPOINT_ID id, PNF_UDP_CONN_INFO pConnInfo);

